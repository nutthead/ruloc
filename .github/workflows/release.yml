# ============================================================================
# Release Pipeline
# ============================================================================
# Automated production releases for ruloc
# - Triggered by tags or manual dispatch inputs
# - Builds cross-platform artifacts with cargo
# - Generates SBOMs and signs artifacts via Sigstore
# - Publishes GitHub releases and crates.io packages
# - Posts release notes with installation guidance

name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      skip_publish:
        description: 'Skip publishing to crates.io'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  actions: read

# Environment variables for release builds and Sigstore signing
env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUST_BACKTRACE: short
  # Sigstore configuration for keyless artifact signing
  COSIGN_EXPERIMENTAL: 1  # Enable experimental keyless signing

jobs:
  # Extracts and validates version from tag or manual input
  # All other jobs depend on this for version consistency
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          fi

          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Releasing version: ${VERSION}"

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0

      - name: Verify version matches Cargo.toml
        run: |
          # Use cargo metadata for robust version parsing
          CARGO_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          if [[ "${{ steps.version.outputs.version }}" != "$CARGO_VERSION" ]]; then
            echo "Version mismatch: tag/input=${{ steps.version.outputs.version }} vs Cargo.toml=$CARGO_VERSION"
            exit 1
          fi

  # Runs security audit and generates Software Bill of Materials (SBOM)
  # SBOM provides transparency about dependencies in the release
  security-scan:
    name: Security Audit & SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [prepare-release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: security

      - name: Setup tool cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-audit-cyclonedx-deny
          restore-keys: |
            cargo-tools-${{ runner.os }}-

      - name: Install security tools
        run: |
          command -v cargo-audit || cargo install cargo-audit --locked
          command -v cargo-cyclonedx || cargo install cargo-cyclonedx --locked
          command -v cargo-deny || cargo install cargo-deny --locked

      - name: Run security audit
        run: |
          cargo audit --json > audit-report.json
          cargo deny check --show-stats || true

      - name: Generate SBOM
        run: |
          cargo cyclonedx --format json --spec-version 1.5 --override-filename sbom
          cargo cyclonedx --format xml --spec-version 1.5 --override-filename sbom

      - name: Upload security artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: security-reports
          path: |
            audit-report.json
            sbom.json
            sbom.xml
          retention-days: 90

  # Builds optimized release binaries for all supported platforms
  # Uses cross-compilation for ARM and RISC-V targets
  build-binaries:
    name: Build ${{ matrix.target }}
    needs: [prepare-release]
    timeout-minutes: 90
    strategy:
      fail-fast: false  # Continue building other targets if one fails
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: true

          - os: macos-14
            target: aarch64-apple-darwin
            use_cross: false

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use_cross: false
            experimental: true  # Windows ARM64 support is experimental

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true

          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            use_cross: true
            experimental: true  # RISC-V support is experimental

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: ${{ matrix.target }}
          workspaces: ". -> target"

      - name: Install cross
        if: matrix.use_cross
        uses: taiki-e/install-action@5ab30948b991e8d6aa5a6c1e33c6aea130c6de65 # v2.62.12
        with:
          tool: cross

      - name: Build release binary
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --locked --release --target ${{ matrix.target }}
          else
            cargo build --locked --release --target ${{ matrix.target }}
          fi
        shell: bash
        env:
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
          CARGO_PROFILE_RELEASE_STRIP: symbols
          CARGO_PROFILE_RELEASE_PANIC: abort

      - name: Package artifacts
        id: package
        shell: bash
        run: |
          set -euo pipefail

          BINARY_NAME="ruloc"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          VERSION="${{ needs.prepare-release.outputs.version }}"
          ARCHIVE_NAME="ruloc-${VERSION}-${{ matrix.target }}"
          BINARY_PATH="target/${{ matrix.target }}/release/${BINARY_NAME}"

          echo "=== Verifying build artifacts ==="

          # Verify binary exists
          if [ ! -f "${BINARY_PATH}" ]; then
            echo "❌ ERROR: Binary not found at ${BINARY_PATH}"
            echo "Build may have failed silently"
            echo "Directory contents:"
            ls -la "target/${{ matrix.target }}/release/" 2>/dev/null || echo "Release directory does not exist"
            exit 1
          fi
          echo "✅ Binary found: ${BINARY_PATH}"

          # Verify README.md exists
          if [ ! -f "README.md" ]; then
            echo "❌ ERROR: README.md not found in repository root"
            exit 1
          fi
          echo "✅ README.md found"

          # Verify LICENSE exists
          if [ ! -f "LICENSE" ]; then
            echo "❌ ERROR: LICENSE file not found in repository root"
            exit 1
          fi
          echo "✅ LICENSE found"

          echo "=== Packaging artifacts ==="
          mkdir -p dist
          cp "${BINARY_PATH}" "dist/${BINARY_NAME}"
          cp README.md LICENSE dist/

          ARCHIVE_BASENAME="${ARCHIVE_NAME}.tar.gz"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ARCHIVE_BASENAME="${ARCHIVE_NAME}.zip"
          fi

          pushd dist >/dev/null
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "../${ARCHIVE_BASENAME}" ./*
          else
            tar -czf "../${ARCHIVE_BASENAME}" .
          fi
          popd >/dev/null

          # Verify archive was created
          if [ ! -f "${ARCHIVE_BASENAME}" ]; then
            echo "❌ ERROR: Archive not created: ${ARCHIVE_BASENAME}"
            echo "Packaging command may have failed"
            exit 1
          fi
          echo "✅ Archive created: ${ARCHIVE_BASENAME}"

          # Generate checksum
          if [[ "${{ matrix.os }}" == "macos-14" ]]; then
            shasum -a 256 "${ARCHIVE_BASENAME}" > "${ARCHIVE_NAME}.sha256"
          else
            sha256sum "${ARCHIVE_BASENAME}" > "${ARCHIVE_NAME}.sha256"
          fi

          # Verify checksum file was created
          if [ ! -f "${ARCHIVE_NAME}.sha256" ]; then
            echo "❌ ERROR: Checksum file not created: ${ARCHIVE_NAME}.sha256"
            exit 1
          fi
          echo "✅ Checksum created: ${ARCHIVE_NAME}.sha256"

          # Move files to dist directory
          mv "${ARCHIVE_BASENAME}" dist/
          mv "${ARCHIVE_NAME}.sha256" dist/

          # Verify files were moved successfully
          if [ ! -f "dist/${ARCHIVE_BASENAME}" ]; then
            echo "❌ ERROR: Archive not found in dist/ after move"
            exit 1
          fi
          if [ ! -f "dist/${ARCHIVE_NAME}.sha256" ]; then
            echo "❌ ERROR: Checksum not found in dist/ after move"
            exit 1
          fi

          echo "✅ Packaging complete"
          echo "archive=${ARCHIVE_BASENAME}" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        if: success()  # Only upload if build succeeded (prevents partial artifacts from experimental targets)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binary-${{ matrix.target }}
          path: dist/*
          retention-days: 7

  # Generates SLSA Build Level 3 provenance and signs artifacts
  # Provides cryptographic proof of build integrity using Sigstore
  attestation:
    name: Generate Attestations
    needs: [build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      id-token: write  # Required for Sigstore keyless signing
      attestations: write  # Required for GitHub attestations
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: artifacts
          pattern: binary-*
          merge-multiple: true

      - name: Verify downloaded artifacts
        run: |
          echo "=== Verifying artifacts directory ==="

          # Check if artifacts directory exists
          if [ ! -d "artifacts" ]; then
            echo "❌ ERROR: artifacts directory was not created"
            echo "Artifact download may have failed"
            exit 1
          fi
          echo "✅ artifacts directory exists"

          # Check if artifacts directory contains files
          if [ -z "$(ls -A artifacts 2>/dev/null)" ]; then
            echo "❌ ERROR: artifacts directory is empty"
            echo "No artifacts were downloaded"
            exit 1
          fi
          echo "✅ artifacts directory contains files"

          echo ""
          echo "=== Artifact directory structure ==="
          find artifacts -type f | sort

          echo ""
          echo "=== Archives found ==="
          ARCHIVES=$(find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) | sort)
          if [ -z "$ARCHIVES" ]; then
            echo "❌ ERROR: No .tar.gz or .zip archives found in artifacts/"
            echo "Build artifacts may not have been uploaded correctly"
            exit 1
          fi
          echo "$ARCHIVES"
          ARCHIVE_COUNT=$(echo "$ARCHIVES" | wc -l)
          echo ""
          echo "✅ Found $ARCHIVE_COUNT archive(s) ready for signing"

      - name: Install cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        with:
          cosign-release: 'v2.4.0'

      - name: Generate build provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: 'artifacts/**/*.tar.gz'
          subject-name: 'ruloc'
          push-to-registry: true

      - name: Generate Windows provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: 'artifacts/**/*.zip'
          subject-name: 'ruloc'
          push-to-registry: true

      - name: Sign artifacts with cosign
        run: |
          set -e  # Exit on any error

          echo "Searching for archives to sign..."

          # Find all archives to sign (exclude .sig, .crt, .sha256 files)
          ARCHIVES=$(find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) ! -name "*.sig" ! -name "*.crt" | sort)

          if [ -z "$ARCHIVES" ]; then
            echo "❌ ERROR: No archives found to sign!"
            echo "Directory contents:"
            ls -laR artifacts/
            exit 1
          fi

          echo "Found archives to sign:"
          echo "$ARCHIVES"
          echo ""

          SIGNED_COUNT=0
          while IFS= read -r file; do
            [ -z "$file" ] && continue  # Skip empty lines

            echo "=== Signing: $file ==="
            cosign sign-blob \
              --yes \
              --oidc-issuer="https://token.actions.githubusercontent.com" \
              --output-signature="${file}.sig" \
              --output-certificate="${file}.crt" \
              "$file"

            # Verify signature was created
            if [[ ! -f "${file}.sig" ]] || [[ ! -f "${file}.crt" ]]; then
              echo "❌ ERROR: Failed to create signature for $file"
              exit 1
            fi

            echo "✓ Signed successfully"
            SIGNED_COUNT=$((SIGNED_COUNT + 1))
          done <<< "$ARCHIVES"

          echo ""
          echo "✅ Successfully signed $SIGNED_COUNT artifacts"

      - name: Upload attestation artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: attestations
          path: |
            artifacts/**/*.sig
            artifacts/**/*.crt
          retention-days: 90

  generate-changelog:
    name: Generate Changelog
    needs: [prepare-release]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install git-cliff
        uses: taiki-e/install-action@5ab30948b991e8d6aa5a6c1e33c6aea130c6de65 # v2.62.12
        with:
          tool: git-cliff

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"

          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]' | sed -n '2p')

          if [[ -n "$PREV_TAG" ]]; then
            echo "Generating changelog from $PREV_TAG to v$VERSION"
            CHANGELOG=$(git-cliff "$PREV_TAG"..HEAD --strip all)
          else
            echo "Generating changelog for all commits"
            CHANGELOG=$(git-cliff --strip all)
          fi

          echo "$CHANGELOG" > changelog.md

          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Upload changelog
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: changelog
          path: changelog.md
          retention-days: 7

  # Creates GitHub release with binaries, signatures, and SBOM
  # Waits for all artifacts to be ready before publishing
  publish-release:
    name: Publish GitHub Release
    needs: [prepare-release, build-binaries, attestation, security-scan, generate-changelog]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write  # Required to create releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download all artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: release-artifacts

      - name: Generate release notes
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"

          cat > release-notes.md << EOF
          ## 🚀 ruloc v${VERSION}

          ### 📊 Release Metrics
          - **SLSA Level**: 3 ✅
          - **Signed**: Yes (Sigstore/Cosign) ✅
          - **Attestation**: Available ✅
          - **SBOM**: Included (CycloneDX format) ✅

          ### 📝 What's Changed
          ${{ needs.generate-changelog.outputs.changelog }}

          ### 🔒 Security & Verification

          All release artifacts are signed using Sigstore's keyless signing with SLSA provenance.

          #### Quick Verification (Linux x86_64 example)
          \`\`\`bash
          # Download artifact and signature
          VERSION="${VERSION}"
          PLATFORM="x86_64-unknown-linux-gnu"
          ARTIFACT="ruloc-\${VERSION}-\${PLATFORM}.tar.gz"

          curl -LO "https://github.com/${{ github.repository }}/releases/download/v\${VERSION}/\${ARTIFACT}"
          curl -LO "https://github.com/${{ github.repository }}/releases/download/v\${VERSION}/\${ARTIFACT}.sig"
          curl -LO "https://github.com/${{ github.repository }}/releases/download/v\${VERSION}/\${ARTIFACT}.crt"

          # Verify signature
          cosign verify-blob \\
            --certificate "\${ARTIFACT}.crt" \\
            --signature "\${ARTIFACT}.sig" \\
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\\.github/workflows/release\\.yml@refs/tags/v.*" \\
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \\
            "\${ARTIFACT}"
          \`\`\`

          #### Supported Platforms
          Replace \`PLATFORM\` with your target:
          - \`x86_64-unknown-linux-gnu\` (Linux x86_64 glibc)
          - \`x86_64-unknown-linux-musl\` (Linux x86_64 musl)
          - \`aarch64-unknown-linux-gnu\` (Linux ARM64 glibc)
          - \`aarch64-apple-darwin\` (macOS Apple Silicon)
          - \`x86_64-pc-windows-msvc\` (Windows x86_64)
          - Additional platforms listed below

          ### 📦 Installation

          #### Cargo
          ```bash
          cargo install ruloc
          ```

          #### macOS (Apple Silicon)
          ```bash
          PLATFORM="aarch64-apple-darwin"
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}"
          curl -L "${DOWNLOAD_URL}/ruloc-${VERSION}-${PLATFORM}.tar.gz" | tar xz
          sudo mv ruloc /usr/local/bin/
          ```

          #### Linux
          ```bash
          PLATFORM="x86_64-unknown-linux-gnu"
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}"
          curl -L "${DOWNLOAD_URL}/ruloc-${VERSION}-${PLATFORM}.tar.gz" | tar xz
          sudo mv ruloc /usr/local/bin/
          ```

          ### 🏗️ Supported Platforms
          - Linux (x86_64, aarch64, armv7) - glibc and musl
          - macOS (Apple Silicon - M1/M2/M3/M4 and later)
          - Windows (x86_64, ARM64)
          - RISC-V (experimental)

          ---
          *Released with ❤️ using GitHub Actions, release-plz, and Sigstore*
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: ruloc v${{ needs.prepare-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}
          files: |
            release-artifacts/**/*.tar.gz
            release-artifacts/**/*.zip
            release-artifacts/**/*.sha256
            release-artifacts/**/*.sig
            release-artifacts/**/*.crt
            release-artifacts/security-reports/*
          generate_release_notes: false

  # Publishes the crate to crates.io after GitHub release succeeds
  # Can be skipped via workflow_dispatch input for testing
  publish-crate:
    name: Publish to crates.io
    needs: [publish-release]
    if: github.event.inputs.skip_publish != true
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          cache-on-failure: false

      - name: Verify package
        run: |
          cargo package --locked --allow-dirty
          cargo package --locked --list

      - name: Validate cargo registry token
        run: |
          if [ -z "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]; then
            echo "❌ Error: CARGO_REGISTRY_TOKEN not configured"
            echo ""
            echo "To publish to crates.io, add CARGO_REGISTRY_TOKEN to repository secrets:"
            echo "1. Get token from https://crates.io/me"
            echo "2. Add to https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          echo "✅ CARGO_REGISTRY_TOKEN is configured"

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  verify-release:
    name: Verify Release
    needs: [prepare-release, publish-release]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Verify signatures
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          BASE_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}"
          ARTIFACT="ruloc-${VERSION}-x86_64-unknown-linux-gnu.tar.gz"

          curl -L -o test-artifact.tar.gz "${BASE_URL}/${ARTIFACT}"
          curl -L -o test-artifact.tar.gz.sig "${BASE_URL}/${ARTIFACT}.sig"
          curl -L -o test-artifact.tar.gz.crt "${BASE_URL}/${ARTIFACT}.crt"

          WORKFLOW_ID="https://github.com/${{ github.repository }}/.github/workflows/release.yml@refs/tags/v.*"
          cosign verify-blob \
            --certificate test-artifact.tar.gz.crt \
            --signature test-artifact.tar.gz.sig \
            --certificate-identity-regexp "$WORKFLOW_ID" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            test-artifact.tar.gz

      - name: Verify crate publication
        if: github.event.inputs.skip_publish != true
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"

          echo "Waiting for crates.io to index version ${VERSION}..."

          # Poll with exponential backoff and proper error handling
          for i in {1..10}; do
            # Fetch with error handling
            HTTP_CODE=$(curl -s -w "%{http_code}" -o response.json \
              "https://crates.io/api/v1/crates/ruloc/${VERSION}")

            if [ "$HTTP_CODE" -eq 200 ]; then
              # Validate JSON before parsing
              if ! jq empty response.json 2>/dev/null; then
                echo "⚠️  Received invalid JSON from crates.io (attempt $i/10)"
                sleep $((i * 10))
                continue
              fi

              PUBLISHED_VERSION=$(jq -r '.version.num // empty' response.json)

              if [ "$PUBLISHED_VERSION" = "$VERSION" ]; then
                echo "✅ Version ${VERSION} is available on crates.io!"
                rm response.json
                exit 0
              fi
            elif [ "$HTTP_CODE" -eq 429 ]; then
              echo "⚠️  Rate limited by crates.io (attempt $i/10)"
            elif [ "$HTTP_CODE" -ge 500 ]; then
              echo "⚠️  crates.io server error $HTTP_CODE (attempt $i/10)"
            else
              echo "⚠️  Version not found, HTTP $HTTP_CODE (attempt $i/10)"
            fi

            sleep $((i * 10))
          done

          echo "❌ Version ${VERSION} not available after 10 attempts"
          rm -f response.json
          exit 1
